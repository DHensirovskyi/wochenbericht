{"version":3,"sources":["turbopack:///[project]/node_modules/@mantine/core/esm/components/Button/Button.mjs/__nextjs-internal-proxy.mjs","turbopack:///[project]/node_modules/@mantine/core/src/components/Button/Button.tsx","turbopack:///[project]/node_modules/@mantine/core/esm/components/Textarea/Textarea.mjs/__nextjs-internal-proxy.mjs","turbopack:///[project]/node_modules/@mantine/core/src/components/Textarea/Textarea.tsx","turbopack:///[project]/src/app/components/DateComponent.tsx/__nextjs-internal-proxy.mjs","turbopack:///[project]/src/app/components/TimePicker.tsx/__nextjs-internal-proxy.mjs","turbopack:///[project]/node_modules/@mantine/dates/esm/components/TimePicker/TimePicker.mjs/__nextjs-internal-proxy.mjs","turbopack:///[project]/node_modules/@mantine/dates/src/components/TimePicker/TimePicker.tsx","turbopack:///[project]/src/app/components/DownloadBtn.tsx","turbopack:///[project]/src/app/components/Card.tsx","turbopack:///[project]/src/app/components/Table.tsx","turbopack:///[project]/src/app/page.tsx"],"sourcesContent":["// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const Button = registerClientReference(\n    function() { throw new Error(\"Attempted to call Button() from the server but Button is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@mantine/core/esm/components/Button/Button.mjs\",\n    \"Button\",\n);\n","import {\n  Box,\n  BoxProps,\n  createVarsResolver,\n  getFontSize,\n  getRadius,\n  getSize,\n  MantineColor,\n  MantineGradient,\n  MantineRadius,\n  MantineSize,\n  polymorphicFactory,\n  PolymorphicFactory,\n  rem,\n  StylesApiProps,\n  useProps,\n  useStyles,\n} from '../../core';\nimport { Loader, LoaderProps } from '../Loader';\nimport { MantineTransition, Transition } from '../Transition';\nimport { UnstyledButton } from '../UnstyledButton';\nimport { ButtonGroup } from './ButtonGroup/ButtonGroup';\nimport { ButtonGroupSection } from './ButtonGroupSection/ButtonGroupSection';\nimport classes from './Button.module.css';\n\nexport type ButtonStylesNames = 'root' | 'inner' | 'loader' | 'section' | 'label';\nexport type ButtonVariant =\n  | 'filled'\n  | 'light'\n  | 'outline'\n  | 'transparent'\n  | 'white'\n  | 'subtle'\n  | 'default'\n  | 'gradient';\n\nexport type ButtonCssVariables = {\n  root:\n    | '--button-justify'\n    | '--button-height'\n    | '--button-padding-x'\n    | '--button-fz'\n    | '--button-radius'\n    | '--button-bg'\n    | '--button-hover'\n    | '--button-hover-color'\n    | '--button-color'\n    | '--button-bd';\n};\n\nexport interface ButtonProps extends BoxProps, StylesApiProps<ButtonFactory> {\n  'data-disabled'?: boolean;\n\n  /** Controls button `height`, `font-size` and horizontal `padding` @default `'sm'` */\n  size?: MantineSize | `compact-${MantineSize}` | (string & {});\n\n  /** Key of `theme.colors` or any valid CSS color @default `theme.primaryColor` */\n  color?: MantineColor;\n\n  /** Sets `justify-content` of `inner` element, can be used to change distribution of sections and label @default `'center'` */\n  justify?: React.CSSProperties['justifyContent'];\n\n  /** Content displayed on the left side of the button label */\n  leftSection?: React.ReactNode;\n\n  /** Content displayed on the right side of the button label */\n  rightSection?: React.ReactNode;\n\n  /** If set, the button takes 100% width of its parent container @default `false` */\n  fullWidth?: boolean;\n\n  /** Key of `theme.radius` or any valid CSS value to set `border-radius` @default `theme.defaultRadius` */\n  radius?: MantineRadius;\n\n  /** Gradient configuration used when `variant=\"gradient\"` @default `theme.defaultGradient` */\n  gradient?: MantineGradient;\n\n  /** Sets `disabled` attribute, applies disabled styles */\n  disabled?: boolean;\n\n  /** Button content */\n  children?: React.ReactNode;\n\n  /** If set, the `Loader` component is displayed over the button */\n  loading?: boolean;\n\n  /** Props added to the `Loader` component (only visible when `loading` prop is set) */\n  loaderProps?: LoaderProps;\n\n  /** If set, adjusts text color based on background color for `filled` variant */\n  autoContrast?: boolean;\n}\n\nexport type ButtonFactory = PolymorphicFactory<{\n  props: ButtonProps;\n  defaultRef: HTMLButtonElement;\n  defaultComponent: 'button';\n  stylesNames: ButtonStylesNames;\n  vars: ButtonCssVariables;\n  variant: ButtonVariant;\n  staticComponents: {\n    Group: typeof ButtonGroup;\n    GroupSection: typeof ButtonGroupSection;\n  };\n}>;\n\nconst loaderTransition: MantineTransition = {\n  in: { opacity: 1, transform: `translate(-50%, calc(-50% + ${rem(1)}))` },\n  out: { opacity: 0, transform: 'translate(-50%, -200%)' },\n  common: { transformOrigin: 'center' },\n  transitionProperty: 'transform, opacity',\n};\n\nconst varsResolver = createVarsResolver<ButtonFactory>(\n  (theme, { radius, color, gradient, variant, size, justify, autoContrast }) => {\n    const colors = theme.variantColorResolver({\n      color: color || theme.primaryColor,\n      theme,\n      gradient,\n      variant: variant || 'filled',\n      autoContrast,\n    });\n\n    return {\n      root: {\n        '--button-justify': justify,\n        '--button-height': getSize(size, 'button-height'),\n        '--button-padding-x': getSize(size, 'button-padding-x'),\n        '--button-fz': size?.includes('compact')\n          ? getFontSize(size.replace('compact-', ''))\n          : getFontSize(size),\n        '--button-radius': radius === undefined ? undefined : getRadius(radius),\n        '--button-bg': color || variant ? colors.background : undefined,\n        '--button-hover': color || variant ? colors.hover : undefined,\n        '--button-color': colors.color,\n        '--button-bd': color || variant ? colors.border : undefined,\n        '--button-hover-color': color || variant ? colors.hoverColor : undefined,\n      },\n    };\n  }\n);\n\nexport const Button = polymorphicFactory<ButtonFactory>((_props, ref) => {\n  const props = useProps('Button', null, _props);\n  const {\n    style,\n    vars,\n    className,\n    color,\n    disabled,\n    children,\n    leftSection,\n    rightSection,\n    fullWidth,\n    variant,\n    radius,\n    loading,\n    loaderProps,\n    gradient,\n    classNames,\n    styles,\n    unstyled,\n    'data-disabled': dataDisabled,\n    autoContrast,\n    mod,\n    attributes,\n    ...others\n  } = props;\n\n  const getStyles = useStyles<ButtonFactory>({\n    name: 'Button',\n    props,\n    classes,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    attributes,\n    vars,\n    varsResolver,\n  });\n\n  const hasLeftSection = !!leftSection;\n  const hasRightSection = !!rightSection;\n\n  return (\n    <UnstyledButton\n      ref={ref}\n      {...getStyles('root', { active: !disabled && !loading && !dataDisabled })}\n      unstyled={unstyled}\n      variant={variant}\n      disabled={disabled || loading}\n      mod={[\n        {\n          disabled: disabled || dataDisabled,\n          loading,\n          block: fullWidth,\n          'with-left-section': hasLeftSection,\n          'with-right-section': hasRightSection,\n        },\n        mod,\n      ]}\n      {...others}\n    >\n      {typeof loading === 'boolean' && (\n        <Transition mounted={loading} transition={loaderTransition} duration={150}>\n          {(transitionStyles) => (\n            <Box component=\"span\" {...getStyles('loader', { style: transitionStyles })} aria-hidden>\n              <Loader\n                color=\"var(--button-color)\"\n                size=\"calc(var(--button-height) / 1.8)\"\n                {...loaderProps}\n              />\n            </Box>\n          )}\n        </Transition>\n      )}\n\n      <span {...getStyles('inner')}>\n        {leftSection && (\n          <Box component=\"span\" {...getStyles('section')} mod={{ position: 'left' }}>\n            {leftSection}\n          </Box>\n        )}\n\n        <Box component=\"span\" mod={{ loading }} {...getStyles('label')}>\n          {children}\n        </Box>\n\n        {rightSection && (\n          <Box component=\"span\" {...getStyles('section')} mod={{ position: 'right' }}>\n            {rightSection}\n          </Box>\n        )}\n      </span>\n    </UnstyledButton>\n  );\n});\n\nButton.classes = classes;\nButton.displayName = '@mantine/core/Button';\nButton.Group = ButtonGroup;\nButton.GroupSection = ButtonGroupSection;\n","// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const Textarea = registerClientReference(\n    function() { throw new Error(\"Attempted to call Textarea() from the server but Textarea is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@mantine/core/esm/components/Textarea/Textarea.mjs\",\n    \"Textarea\",\n);\n","import TextareaAutosize from 'react-textarea-autosize';\nimport {\n  BoxProps,\n  ElementProps,\n  factory,\n  Factory,\n  getEnv,\n  StylesApiProps,\n  useProps,\n} from '../../core';\nimport { __BaseInputProps, __InputStylesNames } from '../Input';\nimport { InputBase } from '../InputBase';\n\nexport interface TextareaProps\n  extends BoxProps,\n    __BaseInputProps,\n    StylesApiProps<TextareaFactory>,\n    ElementProps<'textarea', 'size'> {\n  __staticSelector?: string;\n\n  /** If set, enables textarea height growing with its content @default `false` */\n  autosize?: boolean;\n\n  /** Maximum rows for autosize textarea to grow, ignored if `autosize` prop is not set */\n  maxRows?: number;\n\n  /** Minimum rows of autosize textarea, ignored if `autosize` prop is not set */\n  minRows?: number;\n\n  /** Controls `resize` CSS property @default `'none'` */\n  resize?: React.CSSProperties['resize'];\n}\n\nexport type TextareaFactory = Factory<{\n  props: TextareaProps;\n  ref: HTMLTextAreaElement;\n  stylesNames: __InputStylesNames;\n}>;\n\nconst defaultProps = {\n  size: 'sm',\n} satisfies Partial<TextareaProps>;\n\nexport const Textarea = factory<TextareaFactory>((props, ref) => {\n  const { autosize, maxRows, minRows, __staticSelector, resize, ...others } = useProps(\n    'Textarea',\n    defaultProps,\n    props\n  );\n\n  const shouldAutosize = autosize && getEnv() !== 'test';\n  const autosizeProps = shouldAutosize ? { maxRows, minRows } : {};\n\n  return (\n    <InputBase<any>\n      component={shouldAutosize ? TextareaAutosize : 'textarea'}\n      ref={ref}\n      {...others}\n      __staticSelector={__staticSelector || 'Textarea'}\n      multiline\n      data-no-overflow={(autosize && maxRows === undefined) || undefined}\n      __vars={{ '--input-resize': resize }}\n      {...autosizeProps}\n    />\n  );\n});\n\nTextarea.classes = InputBase.classes;\nTextarea.displayName = '@mantine/core/Textarea';\n","// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/components/DateComponent.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/components/DateComponent.tsx\",\n    \"default\",\n);\n","// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/components/TimePicker.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/components/TimePicker.tsx\",\n    \"default\",\n);\n","// This file is generated by next-core EcmascriptClientReferenceModule.\nimport { registerClientReference } from \"react-server-dom-turbopack/server\";\nexport const TimePicker = registerClientReference(\n    function() { throw new Error(\"Attempted to call TimePicker() from the server but TimePicker is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/node_modules/@mantine/dates/esm/components/TimePicker/TimePicker.mjs\",\n    \"TimePicker\",\n);\n","import { useRef, useState } from 'react';\nimport {\n  __BaseInputProps,\n  __InputStylesNames,\n  BoxProps,\n  CloseButton,\n  CloseButtonProps,\n  createVarsResolver,\n  DataAttributes,\n  ElementProps,\n  factory,\n  Factory,\n  getFontSize,\n  InputBase,\n  InputVariant,\n  Popover,\n  PopoverProps,\n  ScrollAreaProps,\n  StylesApiProps,\n  useProps,\n  useResolvedStylesApi,\n  useStyles,\n} from '@mantine/core';\nimport { useId, useMergedRef } from '@mantine/hooks';\nimport { SpinInput } from '../SpinInput';\nimport { AmPmInput } from './AmPmInput/AmPmInput';\nimport { AmPmControlsList } from './TimeControlsList/AmPmControlsList';\nimport { TimeControlsList } from './TimeControlsList/TimeControlsList';\nimport { TimePickerProvider } from './TimePicker.context';\nimport {\n  TimePickerAmPmLabels,\n  TimePickerFormat,\n  TimePickerPasteSplit,\n  TimePickerPresets,\n} from './TimePicker.types';\nimport { TimePresets } from './TimePresets/TimePresets';\nimport { useTimePicker } from './use-time-picker';\nimport { clampTime } from './utils/clamp-time/clamp-time';\nimport { getParsedTime } from './utils/get-parsed-time/get-parsed-time';\nimport { getTimeString } from './utils/get-time-string/get-time-string';\nimport classes from './TimePicker.module.css';\n\nexport type TimePickerStylesNames =\n  | 'fieldsRoot'\n  | 'fieldsGroup'\n  | 'field'\n  | 'controlsList'\n  | 'controlsListGroup'\n  | 'control'\n  | 'dropdown'\n  | 'presetsRoot'\n  | 'presetsGroup'\n  | 'presetsGroupLabel'\n  | 'presetControl'\n  | 'scrollarea'\n  | __InputStylesNames;\n\nexport type TimePickerCssVariables = {\n  dropdown: '--control-font-size';\n};\n\nexport interface TimePickerProps\n  extends BoxProps,\n    __BaseInputProps,\n    StylesApiProps<TimePickerFactory>,\n    ElementProps<'div', 'onChange' | 'defaultValue'> {\n  /** Controlled component value */\n  value?: string;\n\n  /** Uncontrolled component default value */\n  defaultValue?: string;\n\n  /** Called when the value changes */\n  onChange?: (value: string) => void;\n\n  /** Determines whether the clear button should be displayed @default `false` */\n  clearable?: boolean;\n\n  /** `name` prop passed down to the hidden input */\n  name?: string;\n\n  /** `form` prop passed down to the hidden input */\n  form?: string;\n\n  /** Min possible time value in `hh:mm:ss` format */\n  min?: string;\n\n  /** Max possible time value in `hh:mm:ss` format */\n  max?: string;\n\n  /** Time format, `'24h'` by default */\n  format?: TimePickerFormat;\n\n  /** Number by which hours are incremented/decremented @default `1` */\n  hoursStep?: number;\n\n  /** Number by which minutes are incremented/decremented @default `1` */\n  minutesStep?: number;\n\n  /** Number by which seconds are incremented/decremented @default `1` */\n  secondsStep?: number;\n\n  /** Determines whether the seconds input should be displayed @default `false` */\n  withSeconds?: boolean;\n\n  /** `aria-label` of hours input */\n  hoursInputLabel?: string;\n\n  /** `aria-label` of minutes input */\n  minutesInputLabel?: string;\n\n  /** `aria-label` of seconds input */\n  secondsInputLabel?: string;\n\n  /** `aria-label` of am/pm input */\n  amPmInputLabel?: string;\n\n  /** Labels used for am/pm values @default `{ am: 'AM', pm: 'PM' }` */\n  amPmLabels?: TimePickerAmPmLabels;\n\n  /** Determines whether the dropdown with time controls list should be visible when the input has focus @default `false` */\n  withDropdown?: boolean;\n\n  /** Props passed down to `Popover` component */\n  popoverProps?: PopoverProps;\n\n  /** Called once when one of the inputs is focused, not called when focused is shifted between hours, minutes, seconds and am/pm inputs */\n  onFocus?: (event: React.FocusEvent<HTMLInputElement>) => void;\n\n  /** Called once when the focus is no longer on any of the inputs */\n  onBlur?: (event: React.FocusEvent<HTMLDivElement>) => void;\n\n  /** Props passed down to clear button */\n  clearButtonProps?: CloseButtonProps & ElementProps<'button'> & DataAttributes;\n\n  /** Props passed down to hours input */\n  hoursInputProps?: React.ComponentPropsWithoutRef<'input'> & DataAttributes;\n\n  /** Props passed down to minutes input */\n  minutesInputProps?: React.ComponentPropsWithoutRef<'input'> & DataAttributes;\n\n  /** Props passed down to seconds input */\n  secondsInputProps?: React.ComponentPropsWithoutRef<'input'> & DataAttributes;\n\n  /** Props passed down to am/pm select */\n  amPmSelectProps?: React.ComponentPropsWithoutRef<'select'> & DataAttributes;\n\n  /** If set, the value cannot be updated */\n  readOnly?: boolean;\n\n  /** If set, the component becomes disabled */\n  disabled?: boolean;\n\n  /** Props passed down to the hidden input */\n  hiddenInputProps?: React.ComponentPropsWithoutRef<'input'> & DataAttributes;\n\n  /** A function to transform paste values, by default time in 24h format can be parsed on paste for example `23:34:22` */\n  pasteSplit?: TimePickerPasteSplit;\n\n  /** A ref object to get node reference of the hours input */\n  hoursRef?: React.Ref<HTMLInputElement>;\n\n  /** A ref object to get node reference of the minutes input */\n  minutesRef?: React.Ref<HTMLInputElement>;\n\n  /** A ref object to get node reference of the seconds input */\n  secondsRef?: React.Ref<HTMLInputElement>;\n\n  /** A ref object to get node reference of the am/pm select */\n  amPmRef?: React.Ref<HTMLSelectElement>;\n\n  /** Time presets to display in the dropdown */\n  presets?: TimePickerPresets;\n\n  /** Maximum height of the content displayed in the dropdown in px @default `200` */\n  maxDropdownContentHeight?: number;\n\n  /** Props passed down to all underlying `ScrollArea` components */\n  scrollAreaProps?: ScrollAreaProps;\n\n  /** If set, the time controls list are reversed, @default `false` */\n  reverseTimeControlsList?: boolean;\n}\n\nexport type TimePickerFactory = Factory<{\n  props: TimePickerProps;\n  ref: HTMLDivElement;\n  stylesNames: TimePickerStylesNames;\n  vars: TimePickerCssVariables;\n  variant: InputVariant;\n}>;\n\nconst defaultProps = {\n  hoursStep: 1,\n  minutesStep: 1,\n  secondsStep: 1,\n  format: '24h',\n  amPmLabels: { am: 'AM', pm: 'PM' },\n  pasteSplit: getParsedTime,\n  maxDropdownContentHeight: 200,\n} satisfies Partial<TimePickerProps>;\n\nconst varsResolver = createVarsResolver<TimePickerFactory>((_theme, { size }) => ({\n  dropdown: {\n    '--control-font-size': getFontSize(size),\n  },\n}));\n\nexport const TimePicker = factory<TimePickerFactory>((_props, ref) => {\n  const props = useProps('TimePicker', defaultProps, _props);\n  const {\n    classNames,\n    className,\n    style,\n    styles,\n    unstyled,\n    vars,\n    onClick,\n    format,\n    value,\n    defaultValue,\n    onChange,\n    hoursStep,\n    minutesStep,\n    secondsStep,\n    withSeconds,\n    hoursInputLabel,\n    minutesInputLabel,\n    secondsInputLabel,\n    amPmInputLabel,\n    amPmLabels,\n    clearable,\n    onMouseDown,\n    onFocusCapture,\n    onBlurCapture,\n    min,\n    max,\n    popoverProps,\n    withDropdown,\n    rightSection,\n    onFocus,\n    onBlur,\n    clearButtonProps,\n    hoursInputProps,\n    minutesInputProps,\n    secondsInputProps,\n    amPmSelectProps,\n    readOnly,\n    disabled,\n    size,\n    name,\n    form,\n    hiddenInputProps,\n    labelProps,\n    pasteSplit,\n    hoursRef,\n    minutesRef,\n    secondsRef,\n    amPmRef,\n    presets,\n    maxDropdownContentHeight,\n    scrollAreaProps,\n    attributes,\n    reverseTimeControlsList,\n    ...others\n  } = props;\n\n  const { resolvedClassNames, resolvedStyles } = useResolvedStylesApi<TimePickerFactory>({\n    classNames,\n    styles,\n    props,\n  });\n\n  const getStyles = useStyles<TimePickerFactory>({\n    name: 'TimePicker',\n    classes,\n    props,\n    className,\n    style,\n    classNames,\n    styles,\n    unstyled,\n    attributes,\n    vars,\n    varsResolver,\n  });\n\n  const controller = useTimePicker({\n    value,\n    defaultValue,\n    onChange,\n    format,\n    amPmLabels,\n    withSeconds,\n    min,\n    max,\n    clearable,\n    disabled,\n    readOnly,\n    pasteSplit,\n  });\n\n  const _hoursRef = useMergedRef(controller.refs.hours, hoursRef);\n  const _minutesRef = useMergedRef(controller.refs.minutes, minutesRef);\n  const _secondsRef = useMergedRef(controller.refs.seconds, secondsRef);\n  const _amPmRef = useMergedRef(controller.refs.amPm, amPmRef);\n\n  const hoursInputId = useId();\n  const hasFocusRef = useRef(false);\n  const [dropdownOpened, setDropdownOpened] = useState(false);\n\n  const handleFocus = (event: React.FocusEvent<any>) => {\n    if (!hasFocusRef.current) {\n      hasFocusRef.current = true;\n      onFocus?.(event);\n    }\n  };\n\n  const handleBlur = (event: React.FocusEvent<HTMLDivElement>) => {\n    if (!event.currentTarget.contains(event.relatedTarget)) {\n      const computedValue = controller.values;\n      const timeString = getTimeString({\n        ...computedValue,\n        format,\n        amPmLabels,\n        withSeconds: !!withSeconds,\n      });\n\n      if (timeString.valid && min && max) {\n        const clamped = clampTime(timeString.value, min, max);\n\n        if (clamped.timeString !== timeString.value) {\n          controller.setTimeString(clamped.timeString);\n        }\n      }\n      hasFocusRef.current = false;\n      onBlur?.(event);\n    }\n  };\n\n  return (\n    <TimePickerProvider value={{ getStyles, scrollAreaProps, maxDropdownContentHeight }}>\n      <Popover\n        opened={dropdownOpened}\n        transitionProps={{ duration: 0 }}\n        position=\"bottom-start\"\n        withRoles={false}\n        disabled={disabled || readOnly || !withDropdown}\n        {...popoverProps}\n      >\n        <Popover.Target>\n          <InputBase\n            component=\"div\"\n            size={size}\n            disabled={disabled}\n            ref={ref}\n            onClick={(event) => {\n              onClick?.(event);\n              controller.focus('hours');\n            }}\n            onMouseDown={(event) => {\n              event.preventDefault();\n              onMouseDown?.(event);\n            }}\n            onFocusCapture={(event) => {\n              setDropdownOpened(true);\n              onFocusCapture?.(event);\n            }}\n            onBlurCapture={(event) => {\n              setDropdownOpened(false);\n              onBlurCapture?.(event);\n            }}\n            rightSection={\n              rightSection ||\n              (controller.isClearable && (\n                <CloseButton\n                  {...clearButtonProps}\n                  size={size}\n                  onClick={(event) => {\n                    controller.clear();\n                    clearButtonProps?.onClick?.(event);\n                  }}\n                  onMouseDown={(event) => {\n                    event.preventDefault();\n                    clearButtonProps?.onMouseDown?.(event);\n                  }}\n                />\n              ))\n            }\n            labelProps={{ htmlFor: hoursInputId, ...labelProps }}\n            style={style}\n            className={className}\n            classNames={resolvedClassNames}\n            styles={resolvedStyles}\n            __staticSelector=\"TimePicker\"\n            {...others}\n          >\n            <div {...getStyles('fieldsRoot')} dir=\"ltr\">\n              <div {...getStyles('fieldsGroup')} onBlur={handleBlur}>\n                <SpinInput\n                  id={hoursInputId}\n                  {...hoursInputProps}\n                  {...getStyles('field', {\n                    className: hoursInputProps?.className,\n                    style: hoursInputProps?.style,\n                  })}\n                  value={controller.values.hours}\n                  onChange={controller.setHours}\n                  onNextInput={() => controller.focus('minutes')}\n                  min={format === '12h' ? 1 : 0}\n                  max={format === '12h' ? 12 : 23}\n                  allowTemporaryZero={format === '12h'}\n                  focusable\n                  step={hoursStep}\n                  ref={_hoursRef}\n                  aria-label={hoursInputLabel}\n                  readOnly={readOnly}\n                  disabled={disabled}\n                  onPaste={controller.onPaste}\n                  onFocus={(event) => {\n                    handleFocus(event);\n                    hoursInputProps?.onFocus?.(event);\n                  }}\n                  onBlur={(event) => {\n                    const actualInputValue = event.currentTarget.value;\n                    const numericValue = actualInputValue ? parseInt(actualInputValue, 10) : null;\n\n                    if (format === '12h' && numericValue === 0) {\n                      controller.setHours(12);\n                    }\n                    hoursInputProps?.onBlur?.(event);\n                  }}\n                />\n                <span>:</span>\n                <SpinInput\n                  {...minutesInputProps}\n                  {...getStyles('field', {\n                    className: minutesInputProps?.className,\n                    style: minutesInputProps?.style,\n                  })}\n                  value={controller.values.minutes}\n                  onChange={controller.setMinutes}\n                  min={0}\n                  max={59}\n                  focusable\n                  step={minutesStep}\n                  ref={_minutesRef}\n                  onPreviousInput={() => controller.focus('hours')}\n                  onNextInput={() =>\n                    withSeconds ? controller.focus('seconds') : controller.focus('amPm')\n                  }\n                  aria-label={minutesInputLabel}\n                  tabIndex={-1}\n                  readOnly={readOnly}\n                  disabled={disabled}\n                  onPaste={controller.onPaste}\n                  onFocus={(event) => {\n                    handleFocus(event);\n                    minutesInputProps?.onFocus?.(event);\n                  }}\n                />\n\n                {withSeconds && (\n                  <>\n                    <span>:</span>\n                    <SpinInput\n                      {...secondsInputProps}\n                      {...getStyles('field', {\n                        className: secondsInputProps?.className,\n                        style: secondsInputProps?.style,\n                      })}\n                      value={controller.values.seconds}\n                      onChange={controller.setSeconds}\n                      min={0}\n                      max={59}\n                      focusable\n                      step={secondsStep}\n                      ref={_secondsRef}\n                      onPreviousInput={() => controller.focus('minutes')}\n                      onNextInput={() => controller.focus('amPm')}\n                      aria-label={secondsInputLabel}\n                      tabIndex={-1}\n                      readOnly={readOnly}\n                      disabled={disabled}\n                      onPaste={controller.onPaste}\n                      onFocus={(event) => {\n                        handleFocus(event);\n                        secondsInputProps?.onFocus?.(event);\n                      }}\n                    />\n                  </>\n                )}\n\n                {format === '12h' && (\n                  <AmPmInput\n                    {...amPmSelectProps}\n                    inputType={withDropdown ? 'input' : 'select'}\n                    labels={amPmLabels}\n                    value={controller.values.amPm}\n                    onChange={controller.setAmPm}\n                    ref={_amPmRef}\n                    aria-label={amPmInputLabel}\n                    onPreviousInput={() =>\n                      withSeconds ? controller.focus('seconds') : controller.focus('minutes')\n                    }\n                    readOnly={readOnly}\n                    disabled={disabled}\n                    tabIndex={-1}\n                    onPaste={controller.onPaste}\n                    onFocus={(event) => {\n                      handleFocus(event);\n                      amPmSelectProps?.onFocus?.(event);\n                    }}\n                  />\n                )}\n              </div>\n            </div>\n\n            <input\n              type=\"hidden\"\n              name={name}\n              form={form}\n              value={controller.hiddenInputValue}\n              {...hiddenInputProps}\n            />\n          </InputBase>\n        </Popover.Target>\n        <Popover.Dropdown\n          {...getStyles('dropdown')}\n          onMouseDown={(event) => event.preventDefault()}\n        >\n          {presets ? (\n            <TimePresets\n              value={controller.hiddenInputValue}\n              onChange={controller.setTimeString}\n              format={format}\n              presets={presets}\n              amPmLabels={amPmLabels}\n              withSeconds={withSeconds || false}\n            />\n          ) : (\n            <div {...getStyles('controlsListGroup')}>\n              <TimeControlsList\n                min={format === '12h' ? 1 : 0}\n                max={format === '12h' ? 12 : 23}\n                step={hoursStep}\n                value={controller.values.hours}\n                onSelect={controller.setHours}\n                reversed={reverseTimeControlsList}\n              />\n              <TimeControlsList\n                min={0}\n                max={59}\n                step={minutesStep}\n                value={controller.values.minutes}\n                onSelect={controller.setMinutes}\n                reversed={reverseTimeControlsList}\n              />\n              {withSeconds && (\n                <TimeControlsList\n                  min={0}\n                  max={59}\n                  step={secondsStep}\n                  value={controller.values.seconds}\n                  onSelect={controller.setSeconds}\n                  reversed={reverseTimeControlsList}\n                />\n              )}\n              {format === '12h' && (\n                <AmPmControlsList\n                  labels={amPmLabels}\n                  value={controller.values.amPm}\n                  onSelect={controller.setAmPm}\n                />\n              )}\n            </div>\n          )}\n        </Popover.Dropdown>\n      </Popover>\n    </TimePickerProvider>\n  );\n});\n\nTimePicker.displayName = '@mantine/dates/TimePicker';\nTimePicker.classes = classes;\n","import { Button } from \"@mantine/core\";\n\nexport default function DownloadBtn() {\n  return (\n    <div className=\"flex justify-center\">\n      <Button\n        unstyled\n        className=\"py-3 px-8 border border-white/40 rounded-[10px] cursor-pointer \n                   hover:bg-[#1b1b1b] hover:border-[#3BC088] \n                   hover:scale-105 hover:text-[#3BC088] \n                   duration-200 ease-in-out active:scale-100\"\n        type=\"submit\"\n      >\n        Als XLS Herunterladen\n      </Button>\n    </div>\n  );\n}\n","import { Textarea } from \"@mantine/core\";\nimport DateComponent from \"./DateComponent\";\nimport TimePickerComponent from \"./TimePicker\";\nimport { TimePicker } from \"@mantine/dates\";\n\n\nexport default function Card() {\n  return (\n    <section className=\"flex flex-col gap-[10px] mb-10\">\n      <div className=\"p-4 rounded-t-[10px] text-center min-h-[58px] bg-[#383838]/50 font-semibold\">\n        <DateComponent/>\n      </div>\n      \n      <div className=\"p-4 min-h-[200px] bg-[#383838]/50\">\n        <Textarea \n          label=\"Tagesbericht\" \n          placeholder=\"Geben Sie hier Ihren Text ein...\"\n          autosize\n          minRows={4}\n          className=\"w-full\"\n          styles={{\n            root: {\n              width: '100%',\n            },\n            input: {\n              width: '100%',\n              backgroundColor: '#2D2D2D',\n              border: '1px solid #404040',\n              color: 'white',\n              resize: 'vertical',\n              '&:focus': {\n                borderColor: '#228BE6',\n              },\n              '&::placeholder': {\n                color: '#A0A0A0',\n              }\n            },\n            label: {\n              color: 'white',\n            },\n            description: {\n              color: '#A0A0A0',\n            }\n          }}\n        />\n      </div>\n      <TimePickerComponent/>\n      <div className=\"grid grid-cols-2 gap-[10px] justify-between font-semibold\">\n              <div className=\"p-3 rounded-bl-[10px] text-center min-h-[30px] bg-[#383838]/50\">\n                <TimePicker \n                defaultValue=\"00:00\"\n                styles={{\n                  input: {\n                    backgroundColor: '#2D2D2D',\n                    color: 'white',\n                    border: '1px solid #404040',\n                    '&:focus': {\n                      borderColor: '#228BE6',\n                    },\n                    '&::placeholder': {\n                      color: '#A0A0A0',\n                    }\n                  },\n                  field: {\n                    color: 'white',\n                  }\n                    }}\n                  />\n              </div>\n              <div className=\"p-3 rounded-br-[10px] text-center min-h-[30px] bg-[#383838]/50\">\n              <TimePicker\n                defaultValue=\"00:00\"\n                styles={{\n                  input: {\n                    backgroundColor: '#2D2D2D',\n                    color: 'white',\n                    border: '1px solid #404040',\n                    '&:focus': {\n                      borderColor: '#228BE6',\n                    },\n                    '&::placeholder': {\n                      color: '#A0A0A0',\n                    }\n                  },\n                  field: {\n                    color: 'white',\n                  }\n                    }}\n                  />\n              </div>\n          </div>\n    </section>\n  );\n}","import Card from \"./Card\";\n\nexport default function Table() {\n  return (\n    <section className=\"grid xl:grid-cols-5 sm:grid-cols-2 gap-5 w-full grid-cols-1\">\n      <Card />\n      <Card />\n      <Card />\n      <Card />\n      <Card />\n    </section>\n  );\n}\n","import DateComponent from \"./components/DateComponent\";\nimport DownloadBtn from \"./components/DownloadBtn\";\nimport Table from \"./components/Table\";\n\nexport default function HomePage() {\n  return (\n    <main className=\"flex justify-center py-10 px-4 lg:px-0\">\n      <section className=\"w-full max-w-[1350px] text-white flex flex-col gap-6\">\n        <Table />\n        <DownloadBtn />\n      </section>\n    </main>\n  );\n}\n"],"names":[],"mappings":"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","ignoreList":[0,2,4,5,6]}